name: Robotics TDD Simulation CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 7 * * *'

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      TEST_STATUS: ${{ steps.test_status.outputs.TEST_STATUS }}

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Linux Docker ----------
      - name: Run tests in Docker (Linux only)
        if: runner.os == 'Linux'
        id: linux_tests
        continue-on-error: true
        run: |
          echo "üê≥ Running tests inside Docker container..."
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            python:3.10-slim-buster \
            bash -c "
              set -e
              pip install pytest allure-pytest pytest-html
              rm -rf allure-results || true
              pytest -m navigation --alluredir=allure-results | tee pytest.log
            "
          echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      # ---------- Windows ----------
      - name: Set up Python (Windows only)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run tests directly on Windows
        if: runner.os == 'Windows'
        id: windows_tests
        continue-on-error: true
        shell: pwsh
        run: |
          pip install pytest allure-pytest pytest-html
          if (Test-Path "allure-results") { Remove-Item -Recurse -Force allure-results }
          mkdir allure-results
          pytest -m navigation --alluredir=allure-results | Tee-Object -FilePath pytest.log
          $exitCode = $LASTEXITCODE
          Write-Host "Pytest exit code: $exitCode"
          "TEST_EXIT_CODE=$exitCode" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # ---------- Determine test status ----------
      - name: Determine test result status
        id: test_status
        shell: bash
        run: |
          TEST_EXIT_CODE="${{ steps.linux_tests.outputs.TEST_EXIT_CODE || steps.windows_tests.outputs.TEST_EXIT_CODE }}"

          if [ -z "$TEST_EXIT_CODE" ]; then
            echo "TEST_STATUS=infra-failure" >> $GITHUB_OUTPUT
            echo "‚ùå No exit code reported (infra failure)."
          elif [ "$TEST_EXIT_CODE" == "0" ]; then
            echo "TEST_STATUS=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests passed."
          else
            echo "TEST_STATUS=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed by scenario."
          fi

      # ---------- Upload artifacts ----------
      - name: Upload Allure Results
        if: steps.test_status.outputs.TEST_STATUS != 'infra-failure'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Upload pytest logs
        if: steps.test_status.outputs.TEST_STATUS != 'infra-failure'
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs-${{ matrix.os }}
          path: pytest.log
          retention-days: 7

  # ---------------------------------------------------------------------
  # DEPLOY: only if tests ran successfully (not infra-failure)
  # ---------------------------------------------------------------------
  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    if: |
      needs.run-tests.outputs.TEST_STATUS != 'infra-failure'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout previous gh-pages history
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Download Allure Results (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Allure Results (Windows)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -sL -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install -y tzdata

      - name: Generate Allure Reports & Preserve History
        shell: bash
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"
          mkdir -p "$SITE_DIR/latest"
          mkdir -p "$HISTORY_DIR"

          for OS in ubuntu-latest windows-latest; do
            ALLURE_RESULTS_DIR="allure-results/$OS"

            if [ -d "$ALLURE_RESULTS_DIR" ] && [ -n "$(ls -A $ALLURE_RESULTS_DIR)" ]; then
              VERSIONED_DIR="$SITE_DIR/$BUILD_NUMBER/$OS"
              mkdir -p "$VERSIONED_DIR"
              allure generate "$ALLURE_RESULTS_DIR" --output "$VERSIONED_DIR" --clean

              # Copy versioned report to latest
              LATEST_DIR="$SITE_DIR/latest/$OS"
              mkdir -p "$LATEST_DIR"
              cp -r "$VERSIONED_DIR"/* "$LATEST_DIR/"

              # Save to history for trends
              HISTORY_BUILD_DIR="$HISTORY_DIR/$BUILD_NUMBER/$OS"
              mkdir -p "$HISTORY_BUILD_DIR"
              cp -r "$VERSIONED_DIR"/* "$HISTORY_BUILD_DIR/"

              # Create executor.json
              echo "{\"name\":\"$OS\",\"type\":\"GitHub Actions\",\"url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\",\"reportUrl\":\"https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}/$BUILD_NUMBER/$OS/\",\"buildOrder\":\"${GITHUB_RUN_NUMBER}\",\"buildName\":\"Build ${GITHUB_RUN_NUMBER} ($OS)\",\"buildUrl\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\"}" > "$HISTORY_BUILD_DIR/executor.json"
            else
              echo "‚ö†Ô∏è Skipping $OS report generation (no results)."
            fi
          done

          # ---- Generate index.html for report history ----
          INDEX_FILE="$SITE_DIR/index.html"
          echo "<html><head><title>Allure Report History</title></head><body><h1>Allure Report History</h1><ul>" > "$INDEX_FILE"
          for OS in ubuntu-latest windows-latest; do
            for BUILD in $(ls -1 "$HISTORY_DIR" | sort -n); do
              echo "<li><a href=\"_history/$BUILD/$OS/\">$OS Build $BUILD</a></li>" >> "$INDEX_FILE"
            done
          done
          echo "</ul></body></html>" >> "$INDEX_FILE"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}
          echo "### Robotics TDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/index.html)" >> $GITHUB_STEP_SUMMARY
