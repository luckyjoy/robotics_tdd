name: Robotics TDD Simulation CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 7 * * *'

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    outputs:
      TEST_STATUS: ${{ steps.test_status.outputs.TEST_STATUS }}

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- LINUX: Run via Docker ----------
      - name: Run tests in Docker (Linux only)
        if: runner.os == 'Linux'
        id: linux_tests
        continue-on-error: true
        run: |
          echo "🐳 Running tests inside Docker container..."
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            python:3.10-slim-buster \
            bash -c "
              set -e
              pip install pytest allure-pytest pytest-html
              rm -rf allure-results || true
              pytest -m navigation --alluredir=allure-results | tee pytest.log
            "
          echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      # ---------- WINDOWS: Run natively ----------
      - name: Set up Python (Windows only)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run tests directly on Windows
        if: runner.os == 'Windows'
        id: windows_tests
        continue-on-error: true
        run: |
          pip install pytest allure-pytest pytest-html
          rm -rf allure-results || true
          pytest -m navigation --alluredir=allure-results | tee pytest.log
          echo "TEST_EXIT_CODE=$LASTEXITCODE" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # ---------- Determine test status ----------
      - name: Determine test result status
        id: test_status
        run: |
          echo "Determining test status..."
          TEST_EXIT_CODE=1
          if [ "${{ runner.os }}" == "Linux" ]; then
            TEST_EXIT_CODE="${{ steps.linux_tests.outputs.TEST_EXIT_CODE }}"
          else
            TEST_EXIT_CODE="${{ steps.windows_tests.outputs.TEST_EXIT_CODE }}"
          fi

          if [ -z "$TEST_EXIT_CODE" ]; then
            echo "TEST_STATUS=infra-failure" >> $GITHUB_OUTPUT
            echo "❌ No exit code reported (infra failure)."
          elif [ "$TEST_EXIT_CODE" == "0" ]; then
            echo "TEST_STATUS=passed" >> $GITHUB_OUTPUT
            echo "✅ Tests passed."
          else
            echo "TEST_STATUS=failed" >> $GITHUB_OUTPUT
            echo "❌ Tests failed by scenario."
          fi
        shell: bash

      # ---------- Upload artifacts (only if passed or failed) ----------
      - name: Upload Allure Results
        if: steps.test_status.outputs.TEST_STATUS == 'failed' || steps.test_status.outputs.TEST_STATUS == 'passed'
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Upload pytest logs
        if: steps.test_status.outputs.TEST_STATUS == 'failed' || steps.test_status.outputs.TEST_STATUS == 'passed'
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs-${{ matrix.os }}
          path: pytest.log
          retention-days: 7

  # ---------------------------------------------------------------------
  # DEPLOY: only if any OS had passed OR failed (but not infra failure)
  # ---------------------------------------------------------------------
  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    if: |
      needs.run-tests.outputs.TEST_STATUS == 'failed' || 
      needs.run-tests.outputs.TEST_STATUS == 'passed'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Download Allure Results (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Allure Results (Windows)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -sL -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install -y tzdata

      - name: Generate and Deploy Allure Reports
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"
          rm -rf "$SITE_DIR"
          mkdir -p "$SITE_DIR/latest"

          for OS in ubuntu-latest windows-latest; do
            ALLURE_RESULTS_DIR="allure-results/$OS"
            REPORT_DIR="$SITE_DIR/latest/$OS"
            if [ -d "$ALLURE_RESULTS_DIR" ] && [ -n "$(ls -A $ALLURE_RESULTS_DIR)" ]; then
              mkdir -p "$REPORT_DIR"
              echo "Generating Allure report for $OS..."
              allure generate "$ALLURE_RESULTS_DIR" --output "$REPORT_DIR" --clean
            else
              echo "⚠️ Skipping $OS report generation (no results)."
            fi
          done

          echo "🚀 Deploying reports to gh-pages..."
          npx gh-pages -d site \
            --repo "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" \
            --branch gh-pages \
            --message "Deploy Allure Reports - Build ${GITHUB_RUN_NUMBER}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics TDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY
