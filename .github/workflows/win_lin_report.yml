name: Robotics TDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- LINUX (Docker-based) ----------
      - name: Run tests in Docker (Linux only)
        if: runner.os == 'Linux'
        id: linux_tests
        continue-on-error: true
        run: |
          echo "🐳 Running tests inside Docker container..."
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -w /app \
            python:3.10-slim-buster \
            bash -c "
              pip install pytest allure-pytest pytest-html &&
              rm -rf allure-results || true &&
              mkdir -p allure-results &&
              cp supports/categories.json allure-results/ 2>/dev/null || true &&
              cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null || true &&
              pytest -m navigation --alluredir=allure-results | tee pytest.log
            "
          echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      # ---------- WINDOWS (Native) ----------
      - name: Set up Python (Windows only)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run tests directly on Windows
        if: runner.os == 'Windows'
        id: windows_tests
        continue-on-error: true
        run: |
          pip install pytest allure-pytest pytest-html
          rm -rf allure-results || true
          mkdir allure-results
          copy supports\categories.json allure-results\ 2>nul || echo "No categories.json"
          copy supports\windows.properties allure-results\environment.properties 2>nul || echo "No Windows env"
          pytest -m navigation --alluredir=allure-results | tee pytest.log
          echo "TEST_EXIT_CODE=$LASTEXITCODE" >> $env:GITHUB_OUTPUT
        shell: pwsh

      # ---------- Upload Allure & Logs ----------
      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Upload Pytest Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs-${{ matrix.os }}
          path: pytest.log
          retention-days: 7

      # ---------- Fail Job if Tests Failed ----------
      - name: Check test status
        if: ${{ (runner.os == 'Linux' && steps.linux_tests.outcome == 'failure') || (runner.os == 'Windows' && steps.windows_tests.outcome == 'failure') }}
        run: |
          echo "❌ Tests failed on $RUNNER_OS"
          exit 1
        shell: bash


  # ---------------------------------------------------------------------
  # DEPLOYMENT JOB - ALWAYS RUNS
  # ---------------------------------------------------------------------
  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    if: always()
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Download Allure Results (Ubuntu)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Allure Results (Windows)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          ALLURE_VERSION=2.25.0
          curl -sL -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install -y tzdata

      - name: Generate Allure Reports
        run: |
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"
          rm -rf "$SITE_DIR" && mkdir -p "$SITE_DIR/latest"

          CURRENT_BUILD_TIME=$(TZ='America/Los_Angeles' date +"%Y-%m-%d %H:%M:%S %Z")
          echo "Current Time: $CURRENT_BUILD_TIME"

          for OS in ubuntu-latest windows-latest; do
            RESULTS_DIR="allure-results/$OS"
            VERSIONED_DIR="allure-report-${BUILD_NUMBER}-${OS}"

            if [ -d "$RESULTS_DIR" ] && [ -n "$(ls -A $RESULTS_DIR)" ]; then
              mkdir -p "$VERSIONED_DIR"
              if [ -d "$HISTORY_DIR/latest/$OS/history" ]; then
                cp -r "$HISTORY_DIR/latest/$OS/history" "$RESULTS_DIR/"
              fi
              allure generate "$RESULTS_DIR" --output "$VERSIONED_DIR" --clean
              mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
              cp -r "$VERSIONED_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"
              mkdir -p "$SITE_DIR/latest/$OS"
              cp -r "$VERSIONED_DIR"/* "$SITE_DIR/latest/$OS/"
              echo "$CURRENT_BUILD_TIME" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
              cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
            else
              echo "Skipping report for $OS (no results)"
            fi
          done

          echo "<html><head><title>Allure Reports</title></head><body><h1>Allure Reports</h1><ul>" > "$SITE_DIR/index.html"
          for OS in ubuntu-latest windows-latest; do
            if [ -d "$SITE_DIR/latest/$OS" ]; then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><a href='latest/$OS/'>Latest ($OS)</a> - $TS</li>" >> "$SITE_DIR/index.html"
            fi
          done
          echo "</ul></body></html>" >> "$SITE_DIR/index.html"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add summary badges
        run: |
          OWNER=${GITHUB_REPOSITORY_OWNER}
          REPO=${GITHUB_REPOSITORY##*/}
          echo "### Robotics TDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO}/)" >> $GITHUB_STEP_SUMMARY
