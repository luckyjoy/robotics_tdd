name: Robotics TDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read
  pages: none
  id-token: none

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    # Set the default conclusion for matrix jobs to success
    # This job will be marked as FAILED if pytest returns a non-zero exit code
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          # Docker configuration for Linux only
          - os: ubuntu-latest
            container_image: python:3.10-slim-buster

    # Apply the container image defined in the matrix (only on Linux)
    container: ${{ matrix.container_image }} 

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Python Setup & Installation ---

      - name: Set up Python (Windows Only)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies (Windows Only)
        if: runner.os == 'Windows'
        run: |
          echo "Installing pytest allure-pytest..."
          pip install pytest allure-pytest

      - name: Install Python dependencies (Linux/Docker Only)
        if: runner.os == 'Linux'
        run: |
          echo "Installing pytest allure-pytest inside Docker container..."
          pip install pytest allure-pytest

      # --- Test Run Steps ---

      - name: Clean previous allure-results
        run: |
          echo "Cleaning allure-results folder..."
          if [ -d "allure-results" ]; then rm -rf allure-results; fi
        shell: bash

      - name: Copy platform-specific support files
        run: |
          echo "Copying supports files for $RUNNER_OS..."
          mkdir -p allure-results
          
          # 1. Copy categories.json 
          cp supports/categories.json allure-results/ 2>/dev/null || echo "No categories.json file found"

          # 2. Copy environment properties based on OS, renaming to environment.properties
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Copying Ubuntu environment properties..."
            cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null || echo "No Ubuntu environment file found"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Copying Windows environment properties..."
            cp supports/windows.properties allure-results/environment.properties 2>/dev/null || echo "No Windows environment file found"
          fi
        shell: bash

      - name: Generate Executor Info
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          REPO_OWNER=${{ github.repository_owner }}
          
          # Creates executor.json for the 'Executors' tab in Allure report
          echo '{"name":"${{ matrix.os }}","type":"GitHub Actions","url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","reportUrl":"https://${REPO_OWNER}.github.io/${REPO_NAME}/latest/${{ matrix.os }}/","buildOrder":"${{ github.run_number }}","buildName":"Build ${{ github.run_number }} (${{ matrix.os }})","buildUrl":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' > allure-results/executor.json
        shell: bash

      - name: Run tests (Allow Failure to Proceed to Artifact Upload)
        id: run_tests
        # Use '|| true' to prevent a test failure from immediately ending the job.
        # This allows the subsequent steps (Upload Artifact) to run regardless of test outcome.
        run: |
          echo "Running pytest navigation tests..."
          #pytest -m navigation --alluredir=allure-results | tee pytest.log
          pytest --alluredir=allure-results | tee pytest.log
          echo "TEST_EXIT_CODE=$?" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload Allure Results (Always Run)
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

      - name: Check Test Status and Fail Job if Necessary (Signal Unstable Build)
        # Check the exit code from the 'run_tests' step. If it's non-zero, the job fails.
        # This will mark the overall build as FAILED/UNSTABLE, but since deploy-pages uses
        # 'if: always()', it will still run and deploy the report.
        if: steps.run_tests.outputs.TEST_EXIT_CODE != '0'
        run: |
          echo "One or more tests failed (Exit Code: ${{ steps.run_tests.outputs.TEST_EXIT_CODE }}). Marking job as failed/unstable."
          exit 1
        shell: bash

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    permissions:
      contents: write
    # CRITICAL: 'if: always()' ensures the deployment runs even if 'run-tests' failed.
    if: always()

    steps:
      - name: Checkout repository (Primary branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages history
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI and Timezone
        run: |
          echo "Setting up Allure CLI..."
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          # Install time utility for local time conversion (Los Angeles Time)
          sudo apt-get update && sudo apt-get install -y tzdata
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"
          
          # 1. Create the local SITE_DIR
          if [ -d "$SITE_DIR" ]; then rm -rf "$SITE_DIR"; fi
          mkdir -p "$SITE_DIR/latest"
          
          # Copy historical reports
          echo "Copying historical builds from $HISTORY_DIR to $SITE_DIR..."
          find "$HISTORY_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*\/[0-9]+$" -exec cp -r {} "$SITE_DIR/" \; 2>/dev/null || echo "No numeric history folders to copy."

          # Set CURRENT local time to Los Angeles Time (PDT/PST)
          CURRENT_BUILD_TIME=$(TZ='America/Los_Angeles' date +"%Y-%m-%d %H:%M:%S %Z")
          echo "Current Los Angeles Time: $CURRENT_BUILD_TIME"
          
          # 2. Generate NEW reports and merge them into the site directory
          for OS in ubuntu-latest windows-latest; do
          ALLURE_RESULTS_DIR="allure-results/$OS" 
          
          if [ -d "$ALLURE_RESULTS_DIR" ] && [ -n "$(ls -A $ALLURE_RESULTS_DIR)" ]; then
          VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}" 
          mkdir -p "$VERSIONED_REPORT_DIR" 

          # FIX: Trend: Copy history from the previous 'latest' report into the results folder
          if [ -d "$HISTORY_DIR/latest/$OS/history" ]; then
          echo "Copying previous history for $OS to enable Trend graph..."
          cp -r "$HISTORY_DIR/latest/$OS/history" "$ALLURE_RESULTS_DIR/"
          else
          echo "No previous history found for $OS. Trend graph will start empty."
          fi
          
          # Generate the new report
          allure generate "allure-results/$OS" --output "$VERSIONED_REPORT_DIR" --clean 

          # Copy the NEW report into the site directory (this is the current build)
          mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS" 
          cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/" 
          
          # Update 'latest' folder with NEW report
          mkdir -p "$SITE_DIR/latest/$OS" 
          cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/$OS/" 

          # FIX: Update build info to current local time and copy it
          echo "$CURRENT_BUILD_TIME" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" 
          cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt" 
          else
          echo "Skipping report generation for $OS: Artifact not found or empty." 
          fi
          done

      - name: Rebuild index.html
        run: |
          SITE_DIR="site"
          echo "<html><head><title>Allure Reports History</title><style>body { font-family: sans-serif; }</style></head><body><h1>Allure Reports History</h1><hr><ul>" > "$SITE_DIR/index.html"

          # 1. Latest reports - Reads timestamp directly from the newly created 'latest' folder
          for OS in ubuntu-latest windows-latest; do
          if [ -d "$SITE_DIR/latest/$OS" ]; then
          # Read the timestamp from the file we just created/updated
          TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
          echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: ${TS}</li>" >> "$SITE_DIR/index.html"
          fi
          done
          
          echo "</ul><hr><h2>All Historical Builds</h2><ul>" >> "$SITE_DIR/index.html"
          
          # 2. Historical reports (Reads timestamps from all build folders)
          HISTORICAL_BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*\/[0-9]+$" | xargs -n 1 basename | sort -nr)
          
          if [ -z "$HISTORICAL_BUILDS" ]; then
          echo "<p>No historical builds found.</p>" >> "$SITE_DIR/index.html"
          else
          for BUILD in $HISTORICAL_BUILDS; do
          for OS in ubuntu-latest windows-latest; do
          if [ -d "$SITE_DIR/$BUILD/$OS" ]; then
          TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
          echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
          fi
          done
          done
          fi

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics TDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY