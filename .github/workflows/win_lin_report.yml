name: Robotics TDD Simulation CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 7 * * *'

# CRITICAL FIX: Set minimal global permissions to block the automatic Pages deployment
permissions:
  contents: read
  actions: read
  checks: read
  pull-requests: read
  statuses: read
  pages: none 
  id-token: none 

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: write # Needed for artifact upload

    steps:
  
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          echo "Installing pytest allure-pytest..."
          pip install pytest allure-pytest

      - name: Clean previous allure-results
        run: |
          echo "Cleaning allure-results folder..."
          if [ -d "allure-results" ];
          then rm -rf allure-results; fi
        shell: bash

      - name: Copy platform-specific support files
        # FIX 1: Explicitly use bash shell for cross-platform file operations
        shell: bash
        run: |
          echo "Copying supports files for $RUNNER_OS..."
          mkdir -p allure-results
          
          # 1. Copy categories.json
          cp supports/categories.json allure-results/ 2>/dev/null ||
          echo "No categories.json file found"

          # 2. Copy environment properties based on OS
          if [[ "$RUNNER_OS" == "Linux" ]];
          then
            echo "Copying Ubuntu environment properties..."
            cp supports/ubuntu.properties allure-results/environment.properties 2>/dev/null ||
          echo "No Ubuntu environment file found"
          elif [[ "$RUNNER_OS" == "Windows" ]];
          then
            echo "Copying Windows environment properties..."
            cp supports/windows.properties allure-results/environment.properties 2>/dev/null ||
          echo "No Windows environment file found"
          fi

      - name: Run tests
        shell: bash
        run: |
          echo "Running pytest navigation tests..."
          # FIX 2: Use standard output redirection for reliability, ensuring the job fails if tests fail
          pytest -m navigation --alluredir=allure-results > pytest.log 2>&1

      - name: Verify Allure Results Exist
        # FIX 3: Explicitly fail the job if no results were generated (to prevent "0 test cases" error)
        shell: bash
        run: |
          if [ -z "$(ls -A allure-results)" ]; then
            echo "Error: allure-results directory is empty. Pytest likely failed or found no tests."
            exit 1
          fi

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.os }}
          path: allure-results
          retention-days: 7

  deploy-pages:
    runs-on: ubuntu-latest
    needs: run-tests
    permissions:
      contents: write 

    steps:
      - name: Checkout repository (Primary branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step to clone the existing gh-pages content to merge with new reports
      - name: Checkout gh-pages history
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: gh-pages
          path: _history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false

      - name: Download Linux Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-ubuntu-latest
          path: allure-results/ubuntu-latest

      - name: Download Windows Allure Results
        uses: actions/download-artifact@v4
        with:
          name: allure-results-windows-latest
          path: allure-results/windows-latest

      - name: Setup Allure CLI
        run: |
          echo "Setting up Allure CLI..."
          ALLURE_VERSION=2.25.0
          curl -L -o allure.tgz "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
          mkdir -p allure-commandline
          tar -xzf allure.tgz -C allure-commandline --strip-components 1
          echo "$PWD/allure-commandline/bin" >> $GITHUB_PATH

      - name: Generate Allure Reports
        run: |
          echo "Generating Allure reports..."
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}
          SITE_DIR="site"
          HISTORY_DIR="_history"
          
          # 1. Prepare site directory
          if [ -d "$SITE_DIR" ];
          then rm -rf "$SITE_DIR"; fi
          mkdir -p "$SITE_DIR/latest"
          
          # 2. Copy historical reports
          echo "Copying historical builds from $HISTORY_DIR to $SITE_DIR..."
          find "$HISTORY_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*\/[0-9]+$" -exec cp -r {} "$SITE_DIR/" \;
          2>/dev/null || echo "No numeric history folders to copy."

          # 3. Generate NEW reports and merge
          for OS in ubuntu-latest windows-latest;
          do
            VERSIONED_REPORT_DIR="allure-report-${BUILD_NUMBER}-${OS}"
            mkdir -p "$VERSIONED_REPORT_DIR"
            
            # Generate the new report
            allure generate "allure-results/$OS" --output "$VERSIONED_REPORT_DIR" --clean

            # Copy NEW report to versioned and latest folders
            mkdir -p "$SITE_DIR/$BUILD_NUMBER/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/$BUILD_NUMBER/$OS/"
            
            mkdir -p "$SITE_DIR/latest/$OS"
            cp -r "$VERSIONED_REPORT_DIR"/* "$SITE_DIR/latest/$OS/"

            # Update build info
            date -u +"%Y-%m-%d %H:%M:%S UTC" > "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt"
            cp "$SITE_DIR/$BUILD_NUMBER/$OS/build-info.txt" "$SITE_DIR/latest/$OS/build-info.txt"
          done

      - name: Rebuild index.html
        run: |
          SITE_DIR="site"
          echo "<html><head><title>Allure Reports History</title><style>body { font-family: sans-serif; }</style></head><body><h1>Allure Reports History</h1><hr><ul>" > "$SITE_DIR/index.html"

          # 1. Latest reports
          for OS in ubuntu-latest windows-latest;
          do
            if [ -d "$SITE_DIR/latest/$OS" ];
          then
              TS=$(cat "$SITE_DIR/latest/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
              echo "<li><strong><a href='latest/$OS/'>Latest Report ($OS)</a></strong> - Last run: ${TS}</li>" >> "$SITE_DIR/index.html"
            fi
          done
          
          echo "</ul><hr><h2>All Historical Builds</h2><ul>" >> "$SITE_DIR/index.html"
         
          # 2. Historical reports
          HISTORICAL_BUILDS=$(find "$SITE_DIR" -maxdepth 1 -type d -regextype posix-egrep -regex ".*\/[0-9]+$" | xargs -n 1 basename | sort -nr)
          
          if [ -z "$HISTORICAL_BUILDS" ];
          then
              echo "<p>No historical builds found.</p>" >> "$SITE_DIR/index.html"
          else
              for BUILD in $HISTORICAL_BUILDS;
          do
                for OS in ubuntu-latest windows-latest;
          do
                  if [ -d "$SITE_DIR/$BUILD/$OS" ];
          then
                    TS=$(cat "$SITE_DIR/$BUILD/$OS/build-info.txt" 2>/dev/null || echo "(no timestamp)")
                    echo "<li><a href='${BUILD}/${OS}/'>Build #${BUILD} ($OS)</a> - ${TS}</li>" >> "$SITE_DIR/index.html"
                  fi
                done
          done
          fi

          echo "</ul></body></html>" >> "$SITE_DIR/index.html"
          
      - name: Deploy to GitHub Pages
        # Use force_orphan: true to completely replace gh-pages with the complete site
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy Allure Reports - Build ${{ github.run_number }}"

      - name: Add workflow badges to summary
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          OWNER=${GITHUB_REPOSITORY_OWNER}

          echo "### Robotics BDD Simulation CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "[![Ubuntu Latest Report](https://img.shields.io/badge/Ubuntu-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/ubuntu-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Windows Latest Report](https://img.shields.io/badge/Windows-Latest-blue)](https://${OWNER}.github.io/${REPO_NAME}/latest/windows-latest/)" >> $GITHUB_STEP_SUMMARY
          echo "[![Report History](https://img.shields.io/badge/All-Builds-green)](https://${OWNER}.github.io/${REPO_NAME}/)" >> $GITHUB_STEP_SUMMARY